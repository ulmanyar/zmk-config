#include <dt-bindings/pinctrl/rpi-pico-rp2040-pinctrl.h>
#include <dt-bindings/led/led.h>

&pinctrl {
    spi0_default: spi0_default {
        group1 {
            pinmux = <SPI0_TX_P3>;
        };
    };

    i2c1_default: i2c1_default {
        group1 {
            pinmux = <I2C1_SDA_P10>;
            input-enable;
        };
        group2 {
            pinmux = <I2C1_SCL_P11>;
            input-enable;
        };
    };
};


&spi0 {
	led_strip: ws2812@0 {
		compatible = "worldsemi,ws2812-spi";

		/* SPI */
		reg = <0>; /* ignored, but necessary for SPI bindings */

		/* WS2812 */
		chain-length = <18>; /* arbitrary; change at will */
        /* These are settings from https://www.empirical.ee/zephyr/ */
        /*
         * Sample values from Nordic for these settings are utter garbage. From first principles:
         * WS2812 requires 1.25us +/- 0.6us frame period. For an 8-bit frame, that's 6.4MHz
         * Zero frame is 0.4us high, 0.85us low. +/- 0.15us.
         * One  frame is 0.8us high, 0.45us low. +/- 0.15us.
         *
         * Requesting 6.5MHz gets us 4MHz, so let's do 8MHz instead.
         * At 8 MHz, 3 bits is 0.375us, 6 bits is 0.75us, period is 1.0us,
         * all of which is good enough for us.
         */
        spi-max-frequency = <8000000>;
        spi-one-frame = <0xFC>;
        spi-zero-frame = <0xE0>;
		color-mapping = <LED_COLOR_ID_GREEN LED_COLOR_ID_RED LED_COLOR_ID_BLUE>;
	};
};


/ {
	chosen {
		zmk,underglow = &led_strip;
	};
};


&i2c1 {
    status = "okay";
    glidepoint: glidepoint@2a {
        compatible = "cirque,pinnacle";
        reg = <0x2a>;
        status = "okay";
        dr-gpios = <&gpio0 9 (GPIO_ACTIVE_HIGH)>;

        sensitivity = "4x";
        // sleep;
        no-taps;
    };
    // Rotation config, from Pete
    // This will change in the future
    // https://discord.com/channels/719497620560543766/845285481888743434/1206407883777114182
    input_config {
        compatible = "zmk,input-configs";

        cirque_config {
            device = <&glidepoint>;
            xy-swap;
            y-invert;
            x-invert;
        };
    };
};


/ {
    glidepoint_listener {
        compatible = "zmk,input-listener";
        device = <&glidepoint>;

        xy-swap;
        y-invert;
        x-invert;
    };
};
